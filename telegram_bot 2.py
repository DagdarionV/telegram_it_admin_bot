import logging
import os
import datetime
import json
import re
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes, CommandHandler,
    ChatMemberHandler, ConversationHandler, CallbackQueryHandler
)
# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='bot.log',  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
    filemode='a'
)
logger = logging.getLogger(__name__)
# Configuration
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID", "")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE_PATH", "credentials_telegram.json")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN not set. Bot cannot start.")
    exit()
if not GOOGLE_SHEET_ID:
    logger.warning("GOOGLE_SHEET_ID not set. Google Sheets functionality impaired.")
if not OPENAI_API_KEY and OPENAI_LIB_AVAILABLE:
    logger.warning("OPENAI_API_KEY not set. GPT-4o functionality disabled.")
# Attempt to import external libraries
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_LIBS_AVAILABLE = True
except ImportError:
    GOOGLE_LIBS_AVAILABLE = False
    logging.warning("Google Sheets libraries not found. Google Sheets functionality disabled.")

try:
    import openai
    OPENAI_LIB_AVAILABLE = True
except ImportError:
    OPENAI_LIB_AVAILABLE = False
    logging.warning("OpenAI library not found. GPT-4o functionality disabled.")

# Initialize OpenAI client
openai_client = None
if OPENAI_LIB_AVAILABLE and OPENAI_API_KEY:
    try:
        openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)
        logger.info("OpenAI client initialized successfully.")
    except Exception as e:
        logger.error(f"Failed to initialize OpenAI client: {e}")
# In-memory storage
BOT_DATA = {
    "sysadmin_telegram_id": None,
    "sysadmin_telegram_username": None,
    "task_type_deadlines": {
        "default": 24,
        "üì® –ü–æ—á—Ç–∞ / Office / Outlook / Teams": 8,
        "üñ® –ü—Ä–∏–Ω—Ç–µ—Ä / –°–∫–∞–Ω–µ—Ä / –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏": 4,
        "üíæ –ü—Ä–æ–≥—Ä–∞–º–º—ã (1–°, AutoCAD, –¥—Ä.)": 8,
        "üîß –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏": 12,
        "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç / –°–µ—Ç—å / –ö–∞–±–µ–ª–∏": 6,
        "üö™ –ü—Ä–æ–ø—É—Å–∫–∞ / –°–ö–£–î / –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ": 4,
        "üë§ –î–æ—Å—Ç—É–ø—ã / –£—á–µ—Ç–∫–∏ / –ó–∞–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤": 2
    },
    "user_violations": {}
}

# Conversation states
CONFIRM_TASK = 0
# Google Sheets Manager
class GoogleSheetsManager:
    def __init__(self, credentials_file_path, spreadsheet_id):
        self.spreadsheet_id = spreadsheet_id
        self.creds = None
        self.client = None
        self.sheet = None
        self.header = ["ID –ó–∞–¥–∞—á–∏", "–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏", "–î–∞—Ç–∞ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                       "–°—Ä–æ–∫ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)", "–°—Ç–∞—Ç—É—Å", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (ID)",
                       "–î–∞—Ç–∞ –§–∞–∫—Ç. –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "ID –°–æ–æ–±—â–µ–Ω–∏—è –ó–∞–¥–∞—á–∏",
                       "ID –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ó–∞–¥–∞—á–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]
        self.offtopic_header = ["–î–∞—Ç–∞", "ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–∫—Å—Ç –°–æ–æ–±—â–µ–Ω–∏—è"]
        self.complaints_header = ["–î–∞—Ç–∞", "ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–∫—Å—Ç –ñ–∞–ª–æ–±—ã", "–°–≤—è–∑–∞–Ω–Ω–æ–µ –°–æ–æ–±—â–µ–Ω–∏–µ"]

        if not GOOGLE_LIBS_AVAILABLE or not spreadsheet_id:
            logger.warning("Google Sheets libraries or Spreadsheet ID missing.")
            return

        try:
            if not os.path.exists(credentials_file_path):
                logger.error(f"Credentials file {credentials_file_path} not found.")
                return

            scopes = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            self.creds = Credentials.from_service_account_file(credentials_file_path, scopes=scopes)
            self.client = gspread.authorize(self.creds)
            self.sheet = self.client.open_by_key(spreadsheet_id)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤
            self.tasks_sheet = self.sheet.worksheet("Tasks") if "Tasks" in [ws.title for ws in self.sheet.worksheets()] else self.sheet.add_worksheet("Tasks", 1000, 20)
            self.offtopic_sheet = self.sheet.worksheet("OfftopicLog") if "OfftopicLog" in [ws.title for ws in self.sheet.worksheets()] else self.sheet.add_worksheet("OfftopicLog", 1000, 10)
            self.complaints_sheet = self.sheet.worksheet("Complaints") if "Complaints" in [ws.title for ws in self.sheet.worksheets()] else self.sheet.add_worksheet("Complaints", 1000, 10)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if not self.tasks_sheet.row_values(1):
                self.tasks_sheet.append_row(self.header)
            if not self.offtopic_sheet.row_values(1):
                self.offtopic_sheet.append_row(self.offtopic_header)
            if not self.complaints_sheet.row_values(1):
                self.complaints_sheet.append_row(self.complaints_header)

            logger.info("Connected to Google Sheets API.")
        except Exception as e:
            logger.error(f"Failed to connect to Google Sheets: {e}")
            self.sheet = None

    def _get_next_task_id(self):
        if not self.tasks_sheet:
            return 1
        try:
            records = self.tasks_sheet.get_all_records()
            return max((int(r.get("ID –ó–∞–¥–∞—á–∏", 0)) for r in records), default=0) + 1
        except Exception as e:
            logger.error(f"Error getting next task ID: {e}")
            return 1
    def add_task(self, task_description, task_category, deadline_plan, message_id, user_id, user_name):
        if not self.tasks_sheet:
            logger.warning("Google Sheets not available. Task not added.")
            return None, False
        try:
            task_id = self._get_next_task_id()
            date_created = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            status = "–ù–æ–≤–∞—è"
            row = [task_id, task_description, date_created, task_category, deadline_plan, status,
                   BOT_DATA.get("sysadmin_telegram_id", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"), "", str(message_id),
                   f"{user_name} ({user_id})", ""]
            self.tasks_sheet.append_row(row)
            logger.info(f"Task {task_id} added: {task_description}")
            return task_id, True
        except Exception as e:
            logger.error(f"Error adding task: {e}")
            return None, False

    def find_task_row(self, task_id_str):
        if not self.tasks_sheet:
            return None
        try:
            task_id = int(task_id_str.strip())
            records = self.tasks_sheet.get_all_records()
            for i, record in enumerate(records, 2):
                if int(record.get("ID –ó–∞–¥–∞—á–∏", 0)) == task_id:
                    return i
            logger.warning(f"Task ID {task_id} not found.")
            return None
        except ValueError:
            logger.warning(f"Invalid task ID format: {task_id_str}")
            return None

    def update_task_status(self, task_id_str, new_status, sysadmin_id_on_done=None):
        if not self.tasks_sheet:
            return False
        row_index = self.find_task_row(task_id_str)
        if not row_index:
            return False
        try:
            self.tasks_sheet.update_cell(row_index, 6, new_status)
            if new_status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" and sysadmin_id_on_done:
                self.tasks_sheet.update_cell(row_index, 8, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                executor = self.tasks_sheet.cell(row_index, 7).value
                if not executor or executor == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                    self.tasks_sheet.update_cell(row_index, 7, str(sysadmin_id_on_done))
            logger.info(f"Task {task_id_str} status updated to {new_status}")
            return True
        except Exception as e:
            logger.error(f"Error updating task {task_id_str}: {e}")
            return False
    def get_task_info(self, task_id_str):
        if not self.tasks_sheet:
            return None
        row_index = self.find_task_row(task_id_str)
        if not row_index:
            return None
        try:
            return dict(zip(self.header, self.tasks_sheet.row_values(row_index)))
        except Exception as e:
            logger.error(f"Error getting task {task_id_str} info: {e}")
            return None

    def get_active_tasks(self):
        if not self.tasks_sheet:
            return []
        try:
            return [r for r in self.tasks_sheet.get_all_records()
                    if r.get("–°—Ç–∞—Ç—É—Å") not in ["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]]
        except Exception as e:
            logger.error(f"Error getting active tasks: {e}")
            return []

    def calculate_remaining_time(self, task_id_str):
        task = self.get_task_info(task_id_str)
        if not task or not task.get("–°—Ä–æ–∫ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"):
            return None
        deadline = datetime.datetime.strptime(task["–°—Ä–æ–∫ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"], "%Y-%m-%d %H:%M:%S")
        now = datetime.datetime.now()
        time_diff = deadline - now
        if time_diff.total_seconds() <= 0:
            return "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
        hours = int(time_diff.total_seconds() / 3600)
        minutes = int((time_diff.total_seconds() % 3600) / 60)
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"

    def log_offtopic_message(self, user_id, user_name, message_text):
        if not self.offtopic_sheet:
            logger.warning("Google Sheets not available. Offtopic message not logged.")
            return
        try:
            row = [datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, user_name, message_text]
            self.offtopic_sheet.append_row(row)
            logger.info(f"Offtopic message logged: {message_text}")
        except Exception as e:
            logger.error(f"Error logging offtopic message: {e}")

    def log_complaint(self, user_id, user_name, complaint_text, related_message=None):
        if not self.complaints_sheet:
            logger.warning("Google Sheets not available. Complaint not logged.")
            return
        try:
            row = [datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, user_name, complaint_text, related_message or ""]
            self.complaints_sheet.append_row(row)
            logger.info(f"Complaint logged: {complaint_text}")
        except Exception as e:
            logger.error(f"Error logging complaint: {e}")

sheets_manager = GoogleSheetsManager(CREDENTIALS_FILE, GOOGLE_SHEET_ID)
# Command Handlers
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä IT-–æ—Ç–¥–µ–ª–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = update.effective_user
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/task <–æ–ø–∏—Å–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/status <ID> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n"
        "/tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    )
    if BOT_DATA.get("sysadmin_telegram_id") and user.id == BOT_DATA["sysadmin_telegram_id"]:
        help_text += "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∏—Å–∞–¥–º–∏–Ω–∞:\n/done <ID> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
    if await check_is_admin(update, context, user.id):
        help_text += "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n/set_sysadmin <ID –∏–ª–∏ @username> - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    await update.message.reply_text(help_text)

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task"""
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>")
        return

    description = " ".join(context.args)
    analysis = await get_gpt_analysis(description)
    category = analysis.get("category", "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ")

    context.user_data["task_description"] = description
    context.user_data["task_category"] = category
    await update.message.reply_text(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: *{category}*.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏:",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–£—Ç–æ—á–Ω–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return CONFIRM_TASK

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <ID –∑–∞–¥–∞—á–∏>")
        return

    task_id = context.args[0]
    task = sheets_manager.get_task_info(task_id)
    if not task:
        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    remaining_time = sheets_manager.calculate_remaining_time(task_id)
    response = (f"üìã –ó–∞–¥–∞—á–∞ ID {task_id}:\n"
                f"*{task['–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏']}*\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
                f"–°—Ç–∞—Ç—É—Å: {task['–°—Ç–∞—Ç—É—Å']}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
    await update.message.reply_text(response, parse_mode="Markdown")

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    tasks = sheets_manager.get_active_tasks()
    if not tasks:
        await update.message.reply_text("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.", parse_mode="Markdown")
        return

    response = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
    for task in tasks:
        task_id = task["ID –ó–∞–¥–∞—á–∏"]
        remaining_time = sheets_manager.calculate_remaining_time(str(task_id))
        response += f"‚Ä¢ ID: {task_id} - {task['–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏']}\n"
        response += f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}, –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
    await update.message.reply_text(response, parse_mode="Markdown")

async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done"""
    user = update.effective_user
    if not BOT_DATA.get("sysadmin_telegram_id") or user.id != BOT_DATA["sysadmin_telegram_id"]:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <ID –∑–∞–¥–∞—á–∏>")
        return

    task_id = context.args[0]
    if sheets_manager.update_task_status(task_id, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", user.id):
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ID {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.", parse_mode="Markdown")
        try:
            task = sheets_manager.get_task_info(task_id)
            if task:
                creator_id_match = re.search(r'\((\d+)\)$', task["ID –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ó–∞–¥–∞—á–∏"])
                if creator_id_match:
                    creator_id = int(creator_id_match.group(1))
                    await context.bot.send_message(
                        creator_id,
                        f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ID {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n*{task['–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏']}*",
                        parse_mode="Markdown"
                    )
        except Exception as e:
            logger.error(f"Failed to notify creator for task {task_id}: {e}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", parse_mode="Markdown")

async def set_sysadmin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_sysadmin"""
    user = update.effective_user
    if not await check_is_admin(update, context, user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_sysadmin <ID –∏–ª–∏ @username>")
        return

    target = context.args[0]
    if target.startswith('@'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, ID –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–∑–∂–µ
        BOT_DATA["sysadmin_telegram_username"] = target[1:]
        await update.message.reply_text(
            f"‚úÖ @{target[1:]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /iam_sysadmin"
        )
    else:
        try:
            sysadmin_id = int(target)
            BOT_DATA["sysadmin_telegram_id"] = sysadmin_id
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {sysadmin_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")

async def iam_sysadmin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iam_sysadmin"""
    user = update.effective_user
    if user.username and user.username.lower() == BOT_DATA.get("sysadmin_telegram_username", "").lower():
        BOT_DATA["sysadmin_telegram_id"] = user.id
        BOT_DATA["sysadmin_telegram_username"] = user.username
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
# Helper functions
async def check_is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(update.effective_chat.id, user_id)
        return chat_member.status in ["creator", "administrator"]
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

async def get_rules_text():
    return (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ IT Oiltech*\n\n"
        "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ò–¢-—Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:\n"
        "- üì® –ü–æ—á—Ç–∞ / Office / Outlook / Teams\n"
        "- üñ® –ü—Ä–∏–Ω—Ç–µ—Ä / –°–∫–∞–Ω–µ—Ä / –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏\n"
        "- üíæ –ü—Ä–æ–≥—Ä–∞–º–º—ã (1–°, AutoCAD, –¥—Ä.)\n"
        "- üîß –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏\n"
        "- üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç / –°–µ—Ç—å / –ö–∞–±–µ–ª–∏\n"
        "- üö™ –ü—Ä–æ–ø—É—Å–∫–∞ / –°–ö–£–î / –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ\n"
        "- üë§ –î–æ—Å—Ç—É–ø—ã / –£—á–µ—Ç–∫–∏ / –ó–∞–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
        "–ó–∞–ø—Ä–µ—â–µ–Ω–æ:\n"
        "- –†–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ (–ø–æ–≥–æ–¥–∞, –ª–∏—á–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –º–µ–º—ã)\n"
        "- –ñ–∞–ª–æ–±—ã, —Ñ–ª—É–¥, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ '–ö–∞–∫–∏–µ —Ç–µ–º—ã –º–æ–∂–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å?'"
    )

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message: str):
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        for admin in admins:
            await context.bot.send_message(admin.user.id, message, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Failed to notify admins: {e}")

async def get_gpt_analysis(text_message: str) -> dict:
    if not openai_client:
        return {"category": "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ", "action": "offtopic"}

    prompt = """
    –¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã IT Oiltech –∫–æ–º–ø–∞–Ω–∏–∏ SRL Oiltech.
    –¢–≤–æ—è —Ü–µ–ª—å: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —á–∏—Å—Ç–æ—Ç—É —á–∞—Ç–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –ò–¢-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º), –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.

    –ö–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:
    1. –ü–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã.
    2. –ò–∑–≤–ª–µ–∫–∞–µ—à—å —Å—É—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∏–º–µ–Ω–∞, –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
    3. –û–ø—Ä–µ–¥–µ–ª—è–µ—à—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.
    4. –û–ø—Ä–µ–¥–µ–ª—è–µ—à—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
       - "create_task": –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ò–¢-—Ç–µ–º–∞—Ç–∏–∫–∏.
       - "check_status": –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (–µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" –∏–ª–∏ "ID 123 –≥–æ—Ç–æ–≤–æ").
       - "mark_done": –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" –∏–ª–∏ "ID 123 –≥–æ—Ç–æ–≤–æ").
       - "offtopic": –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ —Ç–µ–º–µ, —É–¥–∞–ª–∏—Ç—å –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
       - "show_rules": –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫–∏–µ —Ç–µ–º—ã –º–æ–∂–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å?").
       - "complain": –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∂–∞–ª–æ–±—É (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–∂–∞–ª–æ–±–∞", "–ø—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π").
    5. –í–æ–∑–≤—Ä–∞—â–∞–µ—à—å JSON —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
       {"category": "üñ® –ü—Ä–∏–Ω—Ç–µ—Ä / –°–∫–∞–Ω–µ—Ä / –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏", "action": "create_task", "entities": {"description": "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç"}}
       {"category": "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ", "action": "offtopic"}
       {"category": "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ", "action": "show_rules"}
       {"category": "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ", "action": "complain", "entities": {"complaint_text": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"}}

    –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —á–∞—Ç–µ:
    - –†–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ (–ø–æ–≥–æ–¥–∞, –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∂–∞–ª–æ–±—ã, –ª–∏—á–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã).
    - –ú–µ–º—ã, —à—É—Ç–∫–∏, —Ñ–ª—É–¥, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –ü—Ä–æ—Å—å–±—ã –±–µ–∑ –ò–¢-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.

    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
    - üì® –ü–æ—á—Ç–∞ / Office / Outlook / Teams (–ø–æ—á—Ç–∞, Teams, Office365)
    - üñ® –ü—Ä–∏–Ω—Ç–µ—Ä / –°–∫–∞–Ω–µ—Ä / –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ (–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏, —Å–∫–∞–Ω–µ—Ä–∞–º–∏, –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞–º–∏)
    - üíæ –ü—Ä–æ–≥—Ä–∞–º–º—ã (1–°, AutoCAD, –¥—Ä.) (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—à–∏–±–∫–∏)
    - üîß –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥—Ä–∞–π–≤–µ—Ä—ã, –º–æ–Ω–∏—Ç–æ—Ä—ã, –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è)
    - üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç / –°–µ—Ç—å / –ö–∞–±–µ–ª–∏ (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç, Wi-Fi, –∫–∞–±–µ–ª–∏, –ø–æ—Ä—Ç—ã)
    - üö™ –ü—Ä–æ–ø—É—Å–∫–∞ / –°–ö–£–î / –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ (–¥–æ—Å—Ç—É–ø, –∫–∞–º–µ—Ä—ã, —Ç—É—Ä–Ω–∏–∫–µ—Ç—ã)
    - üë§ –î–æ—Å—Ç—É–ø—ã / –£—á–µ—Ç–∫–∏ / –ó–∞–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –ø–∞—Ä–æ–ª–∏)
    - üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ (—Ñ–ª—É–¥, –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ñ—Ñ—Ç–æ–ø)
    """
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}, {"role": "user", "content": text_message}],
            response_format={"type": "json_object"}
        )
        return json.loads(response.choices[0].message.content)
    except Exception as e:
        logger.error(f"OpenAI error for '{text_message}': {e}")
        return {"category": "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ", "action": "offtopic"}

# Keyboard Helpers
def get_main_keyboard(is_sysadmin=False, is_admin=False):
    keyboard = [[KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")]]
    if is_sysadmin:
        keyboard.append([KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")])
    if is_admin:
        keyboard.append([KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Message Handlers
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE, transcribed_text: str = None):
    text = transcribed_text or update.message.text
    if not text:
        return

    user = update.effective_user
    logger.info(f"Message from {user.full_name} ({user.id}): {text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = await check_is_admin(update, context, user.id)
    is_sysadmin = BOT_DATA.get("sysadmin_telegram_id") and user.id == BOT_DATA["sysadmin_telegram_id"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if context.user_data.get("awaiting_task_description"):
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_keyboard(is_sysadmin, is_admin)
            )
            return
        context.user_data.pop("awaiting_task_description")
        context.user_data["task_description"] = text
        await update.message.reply_text(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: *{context.user_data.get('task_category')}*.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏:",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–£—Ç–æ—á–Ω–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return CONFIRM_TASK

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT-4o
    analysis = await get_gpt_analysis(text)
    category = analysis.get("category", "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ")
    action = analysis.get("action", "offtopic")
    entities = analysis.get("entities", {})

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    if category == "üìå –î—Ä—É–≥–æ–µ / –ù–µ –ø–æ —Ç–µ–º–µ" and not is_admin:
        BOT_DATA["user_violations"][user.id] = BOT_DATA["user_violations"].get(user.id, 0) + 1
        sheets_manager.log_offtopic_message(user.id, user.full_name, text)
        try:
            if (await context.bot.get_chat_member(update.effective_chat.id, context.bot.id)).can_delete_messages:
                await update.message.delete()
            await context.bot.send_message(
                user.id,
                f"@{user.username}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ò–¢-—Ç–µ–º–∞—Ç–∏–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", callback_data="show_rules")]
                ])
            )
            if BOT_DATA["user_violations"][user.id] >= 3:
                await context.bot.send_message(user.id, await get_rules_text(), parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Failed to handle offtopic message: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if action == "create_task":
        description = entities.get("description", text)
        context.user_data["task_description"] = description
        context.user_data["task_category"] = category
        await update.message.reply_text(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: *{category}*.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏:",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–£—Ç–æ—á–Ω–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return CONFIRM_TASK

    elif action == "check_status" and is_admin:
        tasks = sheets_manager.get_active_tasks()
        if not tasks:
            await update.message.reply_text("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.", parse_mode="Markdown")
            return
        response = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        for task in tasks:
            task_id = task["ID –ó–∞–¥–∞—á–∏"]
            remaining_time = sheets_manager.calculate_remaining_time(str(task_id))
            response += f"‚Ä¢ ID: {task_id} - {task['–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏']}\n"
            response += f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}, –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        await update.message.reply_text(response, parse_mode="Markdown")
        return

    elif action == "mark_done" and is_sysadmin:
        task_id = entities.get("task_id")
        if task_id and sheets_manager.update_task_status(task_id, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", user.id):
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ID {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.", parse_mode="Markdown")
            try:
                task = sheets_manager.get_task_info(task_id)
                if task:
                    creator_id_match = re.search(r'\((\d+)\)$', task["ID –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ó–∞–¥–∞—á–∏"])
                    if creator_id_match:
                        creator_id = int(creator_id_match.group(1))
                        await context.bot.send_message(
                            creator_id,
                            f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ID {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n*{task['–û–ø–∏—Å–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏']}*",
                            parse_mode="Markdown"
                        )
            except Exception as e:
                logger.error(f"Failed to notify creator for task {task_id}: {e}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", parse_mode="Markdown")
        return

    elif action == "show_rules":
        await update.message.reply_text(await get_rules_text(), parse_mode="Markdown")
        return

    elif action == "complain":
        complaint_text = entities
